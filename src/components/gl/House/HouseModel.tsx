/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 HOUSE_LOW_POLY_WIP.gltf -t -K -T 
Files: HOUSE_LOW_POLY_WIP.gltf [797.6KB] > HOUSE_LOW_POLY_WIP-transformed.glb [97.59KB] (88%)
*/

import { useGLTF } from '@react-three/drei';
import { forwardRef } from 'react';
import * as THREE from 'three';
import { Mesh } from 'three';
import { type GLTF } from 'three-stdlib';
import { shallow } from 'zustand/shallow';
import { useStoreDragging } from '../../../stores/storeDragging';

type GLTFResult = GLTF & {
  nodes: {
    WC_floor: THREE.Mesh;
    books: THREE.Mesh;
  };
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
  };
};

type HouseModel = JSX.IntrinsicElements['group'];

export const HouseModel = forwardRef<Mesh, HouseModel>((props, ref) => {
  const { setIsDragging, isDragging, setDraggingId } = useStoreDragging(
    (state) => ({
      isDragging: state.isDragging,
      setDraggingId: state.setDraggingId,
      setIsDragging: state.setIsDragging,
    }),
    shallow,
  );

  const handleOnClick = () => {
    if (isDragging) {
      setIsDragging(false);
      setDraggingId(null);
    }
  };

  const { nodes, materials } = useGLTF('assets/house_low.glb') as GLTFResult;
  return (
    <group
      {...props}
      dispose={null}
      scale={2}
      position-y={-6}
      onClick={handleOnClick}
    >
      <group>
        <mesh
          ref={ref}
          geometry={nodes.WC_floor.geometry}
          material={materials.PaletteMaterial001}
          position={[-22.237, 2.895, 23.204]}
          rotation={[0, -1.571, 0]}
          scale={[0.913, 0.876, 0.876]}
        />
        <mesh
          geometry={nodes.books.geometry}
          material={materials.PaletteMaterial002}
          position={[-25.78, 5.108, 8.967]}
          scale={1.387}
        />
      </group>
    </group>
  );
});

useGLTF.preload('assets/house_low.glb');
