/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 reactjam_party.gltf -t -K -T 
Files: reactjam_party.gltf [38.24KB] > reactjam_party-transformed.glb [2.81KB] (93%)
*/

import { useGLTF } from '@react-three/drei';
import { forwardRef } from 'react';
import * as THREE from 'three';
import { Mesh } from 'three';
import { GLTF } from 'three-stdlib';
import { DEG2RAD } from 'three/src/math/MathUtils';

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    Cube001: THREE.Mesh;
  };
  materials: {};
};

type ModelProps = JSX.IntrinsicElements['group'] & {
  onClick: () => void;
};

export const Model = forwardRef<Mesh, ModelProps>(
  (props: JSX.IntrinsicElements['group'], ref) => {
    const { nodes } = useGLTF(
      'assets/reactjam_party-transformed.glb',
    ) as GLTFResult;
    return (
      // FIXME : magic transform numbers
      <group
        {...props}
        dispose={null}
        scale={1.8}
        position-y={-1.2}
        rotation-y={0 * DEG2RAD}
      >
        <mesh ref={ref}>
          <group>
            <mesh geometry={nodes.Plane.geometry} scale={18.456}>
              <meshLambertMaterial color="gray" />
            </mesh>
            <instancedMesh
              args={[nodes.Cube001.geometry, nodes.Cube001.material, 5]}
              // @ts-ignore - TODO: fix type, watch Blender file too
              instanceMatrix={nodes.Cube001.instanceMatrix}
            >
              <meshLambertMaterial color="gray" />
            </instancedMesh>
          </group>
        </mesh>
      </group>
    );
  },
);
useGLTF.preload('assets/reactjam_party-transformed.glb');
